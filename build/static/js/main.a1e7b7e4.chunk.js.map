{"version":3,"sources":["components/note.js","components/Notification.js","services/noteService.js","components/Footer.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","Notification","message","noteService","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","newObect","put","Footer","Fragment","style","color","fontStyle","fontSize","App","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","console","log","initialNotes","notesToShow","filter","components_Notification","map","components_note","key","find","n","changedNote","objectSpread","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","length","Date","toISOString","Math","random","value","onChange","target","type","components_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.a1e7b7e4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important ? 'make not important': 'make important'\r\n\r\n    return (\r\n    <li className='note'>\r\n        {note.content}\r\n        <button onClick={toggleImportance}>{label}</button>\r\n    </li>);\r\n}\r\n\r\nexport default Note;\r\n","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }    \r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notification;","import axios from 'axios'\r\n//const baseUrl = 'http://localhost:3001/notes'\r\n//const baseUrl = 'https://react-heluni-p3practice.herokuapp.com/notes'\r\n\r\n//this will use a proxy. why? --> https://fullstackopen.com/en/part3/deploying_app_to_internet#proxy\r\nconst baseUrl = '/api/notes'\r\n\r\n/*const getAll= () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then((response)=> response.data);\r\n}*/\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n      id: 10000,\r\n      content: 'This note is not saved to server',\r\n      date: '2019-05-30T17:30:31.098Z',\r\n      important: true,\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then((response) => response.data)\r\n}\r\n\r\nconst update = (id, newObect) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObect);\r\n\r\n    return request.then((response) => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }\r\n//can also be written like this\r\n/**{\r\n    getAll: getAll,\r\n    create: create,\r\n    update: update\r\n} */\r\n","import React from 'react';\r\n\r\nconst Footer = ()=> {\r\n    const footerStyle= {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div style={footerStyle}>\r\n                <br/>\r\n                <em> Note App, Department of Computer Science, University of Helsinki 2019</em>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Note from './components/note';\r\nimport Notification from './components/Notification';\r\nimport noteService from './services/noteService';\r\nimport Footer from './components/Footer';\r\n\r\n\r\nconst App = () => {\r\n    const [notes, setNotes] = useState([]);\r\n    const [newNote, setNewNote] = useState('');\r\n    const [showAll, setShowAll] = useState(true);\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    const hook = () => {\r\n    console.log('effect')\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes)\r\n      })\r\n    }\r\n    useEffect(hook, []);\r\n\r\n    //CREATE\r\n    const addNote = (event)=> {\r\n      event.preventDefault();\r\n\r\n      const noteObject = {\r\n        id: notes.length + 1,\r\n        content: newNote,\r\n        date: new Date().toISOString,\r\n        important: Math.random > 0.5\r\n      }\r\n\r\n      noteService\r\n        .create(noteObject)\r\n        .then((returnedNote)=>{\r\n          setNotes(notes.concat(returnedNote));\r\n          setNewNote('');\r\n          //console.log('post response...', response);\r\n        })\r\n    }\r\n\r\n\r\n    //UPDATE toggles importance of this note. put request that will replace the note we just chnaged the importance of\r\n    const toggleImportanceOf = id => {\r\n      const note = notes.find((n)=> n.id === id);\r\n\r\n      // creates a new object that is an exact copy of the old note object, apart from the important property\r\n      const changedNote = { ...note, important: !note.important };\r\n\r\n      //PUT request\r\n      noteService\r\n        .update(id, changedNote)\r\n        .then((returnedNote )=>{\r\n          //setNotes to be all the notes except the one with the id we just changed.\r\n          //That should be replaced by the updated one we got from the put request's response.\r\n          setNotes(notes.map(note => note.id !== id ? note : returnedNote));\r\n        })\r\n        .catch(error => {\r\n          //show error notification for only 5 seconds\r\n          setErrorMessage(`the note '${note.content}' was already deleted from server`);\r\n          setTimeout(()=> {\r\n            setErrorMessage(null);\r\n          }, 5000);\r\n          \r\n          //reload notes and dont add the deleted one this time.\r\n          setNotes(notes.filter(n => n.id !== id))\r\n        });\r\n\r\n      console.log('importance of '+ id +' needs to be toggled');\r\n    }\r\n\r\n\r\n    //controls the note input\r\n    const handleNoteChange = (event) => {\r\n      setNewNote(event.target.value);\r\n    }\r\n\r\n    //toggles whether to show all notes or only important notes\r\n    const notesToShow = showAll ?\r\n     notes:\r\n     notes.filter(note => note.important === true);\r\n\r\n     //gets the array of notes ot be displayed and displays them\r\n    const rows = () => {\r\n      return notesToShow.map(note => \r\n      <Note \r\n        key={note.id}\r\n        note={note}\r\n        toggleImportance={()=>toggleImportanceOf(note.id)} />);\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n      <div>\r\n        <h1>Notes</h1>\r\n        <Notification message={errorMessage}/>\r\n        <div>\r\n          <button onClick={()=> setShowAll(!showAll)}>\r\n            show {showAll? \"important\": \"all\"}\r\n          </button>\r\n        </div>\r\n\r\n        <ul>\r\n          {rows()}\r\n        </ul>\r\n\r\n        <form onSubmit={addNote}>\r\n          <input\r\n            value={newNote}\r\n            onChange={handleNoteChange} />\r\n          <button type=\"submit\">Save</button>\r\n        </form>\r\n\r\n        <Footer />\r\n      </div>\r\n    )\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App';\nimport './index.css'\n\n\nReactDOM.render(\n  <App  />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}